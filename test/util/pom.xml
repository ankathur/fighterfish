<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>net.java</groupId>
		<artifactId>jvnet-parent</artifactId>
		<version>1</version>
	</parent>
	<groupId>org.glassfish.fighterfish</groupId>
	<artifactId>test.util</artifactId>
	<version>1.1.0-SNAPSHOT</version>
	<name>A utility bundle which helps writing test cases involving
		GlassFish/Pax-Exam easier</name>
	<scm>
		<connection>scm:svn:https://svn.java.net/svn/glassfish~svn/trunk/fighterfish/test/util</connection>
		<developerConnection>scm:svn:https://svn.java.net/svn/glassfish~svn/trunk/fighterfish/test/util</developerConnection>
		<url>https://svn.java.net/svn/glassfish~svn/trunk/fighterfish/test/util</url>
	</scm>
	<build>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
		</resources>
		<plugins>
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>1.6</source>
					<target>1.6</target>
				</configuration>
			</plugin>
			<plugin>
				<!-- Configure maven-bundle-plugin to generate OSGi manifest. Please 
					note: we use the manifest goal only and not the bundle goal. The bundle goal 
					can lead to very surprising results if the package names are not correctly 
					specified. So, we use the jar plugin to generate the jar. -->
				<groupId>org.apache.felix</groupId>
				<artifactId>maven-bundle-plugin</artifactId>
				<version>2.3.4</version>
				<configuration>
					<!-- By default, we don't export anything. -->
					<Export-Package />
					<!-- Since, we are in a top level pom and we we don't want it to be 
						active for plain jar type artifacts, enable the plugin for hk2-jar and bundle 
						packaging type only, -->
					<supportedProjectTypes>
						<supportedProjectType>jar</supportedProjectType>
					</supportedProjectTypes>
					<instructions>
						<!-- Read all the configuration from osgi.properties file, if it exists. 
							See Felix-699 to find out why we use ${basedir}. -->
						<_include>-${basedir}/osgi.properties</_include>
					</instructions>
				</configuration>
				<executions>
					<execution>
						<id>bundle-manifest</id>
						<phase>process-classes</phase>
						<goals>
							<goal>manifest</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<artifactId>maven-jar-plugin</artifactId>
				<configuration>
					<archive>
						<manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF
						</manifestFile>
					</archive>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-release-plugin</artifactId>
				<configuration>
					<mavenExecutorId>forked-path</mavenExecutorId>
					<useReleaseProfile>false</useReleaseProfile>
					<arguments>${release.arguments}</arguments>
				</configuration>
			</plugin>
		</plugins>
	</build>
	<dependencies>
		<dependency>
			<groupId>org.glassfish</groupId>
			<artifactId>simple-glassfish-api</artifactId>
			<version>3.1.1</version>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.8.1</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.osgi</groupId>
			<artifactId>org.osgi.core</artifactId>
			<version>4.2.0</version>
		</dependency>
		<dependency>
			<groupId>org.osgi</groupId>
			<artifactId>org.osgi.compendium</artifactId>
			<version>4.2.0</version>
		</dependency>
		<dependency>
			<groupId>org.ops4j.pax.exam</groupId>
			<artifactId>pax-exam</artifactId>
			<version>${pax-exam.version}</version>
		</dependency>
		<dependency>
			<groupId>org.ops4j.pax.exam</groupId>
			<artifactId>pax-exam-junit4</artifactId>
			<version>${pax-exam.version}</version>
		</dependency>
		<dependency>
			<!-- Having this dependency instructs pax-exam to use in-process OSGi 
				runtime -->
			<groupId>org.ops4j.pax.exam</groupId>
			<artifactId>pax-exam-container-native</artifactId>
			<version>${pax-exam.version}</version>
		</dependency>
		<!-- Starting with pax-exam 2.2.0, native container requires pax-exam-link-assembly 
			and pax-url-aether to be provisioned as well while using mvn protocol. -->
		<dependency>
			<groupId>org.ops4j.pax.exam</groupId>
			<artifactId>pax-exam-link-assembly</artifactId>
			<version>${pax-exam.version}</version>
		</dependency>
		<dependency>
			<groupId>org.ops4j.pax.url</groupId>
			<artifactId>pax-url-aether</artifactId>
			<version>1.3.3</version>
		</dependency>
		<!-- pax-exam uses slf4j. We need to provide a binding for the same here. -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-jdk14</artifactId>
			<version>1.6.1</version>
		</dependency>
		<dependency>
			<groupId>javax</groupId>
			<artifactId>javaee-web-api</artifactId>
			<version>6.0</version>
			<scope>provided</scope>
			<optional>true</optional>
		</dependency>
		<!-- Finally, we must specify the test framework that must be used when 
				we use pax-exam native test container. Here we are using Felix. To use Equinox, 
				replace by a suitable dependency here. 
		<dependency>
			<groupId>org.apache.felix</groupId>
			<artifactId>org.apache.felix.framework</artifactId>
			<version>3.0.8</version>
		</dependency>
                -->
	</dependencies>
	<properties>
		<!-- The version of pax-exam being used. I have not tested test.util bundle 
			with 2.2.0 yet, so, let's stick to 2.1.0 for now. -->
		<pax-exam.version>2.2.0</pax-exam.version>
	</properties>
</project>
